package huffman;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

class Design {
     public static void printStars() {
        for (int i=0; i<100; i++) {
            System.out.print("*");
        }
        System.out.println();
    }
    public static void appender1() {
        System.out.print("                 ");
    }
    public static void appender2() {
        System.out.print("                 " + "                    ");
    }
}

// node class is the basic structure
// of each node present in the Huffman - tree.
class HuffmanNode {

    int data;
    char c;

    HuffmanNode left;
    HuffmanNode right;
}

// comparator class helps to compare the node
// on the basis of one of its attribute.
// Here we will be compared
// on the basis of data values of the nodes.
class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y)
    {
        return x.data - y.data;
    }
}

public class Huffman {
    // recursive function to print the
    // huffman-code through the tree traversal.
    // Here s is the huffman - code generated.
    public static void printCode(HuffmanNode root, String s)
    {
        Design dgn = new Design();

        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left
                == null
                && root.right
                == null
                && Character.isLetter(root.c)) {

            // c is the character in the node
            dgn.appender2();
            System.out.println("    " + root.c + "      :      " + s);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        Design dgn = new Design();
        dgn.printStars();
        dgn.appender1();
        System.out.println("-----:Java Program to find HUFFMAN CODE of input characters:-----");
        boolean exit = false;
        while (!exit) {
//          number of characters
            int n;
            dgn.appender2();
            System.out.print("Enter no. of characters: ");
            n = s.nextInt();
            dgn.appender2();
            System.out.print("Enter " + n + " characters: ");
            char[] charArray = s.next().toCharArray();
            dgn.appender2();
            System.out.println("Enter frequencies:-");
            int charfreq[] = new int[n];
            for (int i=0; i<n; i++) {
                dgn.appender2();
                System.out.print("Frequency of " + charArray[i] + " : ");
                charfreq[i] = s.nextInt();
            }

            // creating a priority queue q.
            // makes a min-priority queue(min-heap).
            PriorityQueue<HuffmanNode> q = new PriorityQueue<HuffmanNode>(n, new MyComparator());
            for (int i=0; i<n; i++) {
                // creating a Huffman node object
                // and add it to the priority queue.
                HuffmanNode hn = new HuffmanNode();

                hn.c = charArray[i];
                hn.data = charfreq[i];

                hn.left = null;
                hn.right = null;

                // add functions adds
                // the huffman node to the queue.
                q.add(hn);
            }

            // create a root node
            HuffmanNode root = null;

            // Here we will extract the two minimum value
            // from the heap each time until
            // its size reduces to 1, extract until
            // all the nodes are extracted.
            while (q.size() > 1) {

                // first min extract.
                HuffmanNode x = q.peek();
                q.poll();

                // second min extarct.
                HuffmanNode y = q.peek();
                q.poll();

                // new node f which is equal
                HuffmanNode f = new HuffmanNode();

                // to the sum of the frequency of the two nodes
                // assigning values to the f node.
                f.data = x.data + y.data;
                f.c = '-';

                // first extracted node as left child.
                f.left = x;

                // second extracted node as the right child.
                f.right = y;

                // marking the f node as the root node.
                root = f;

                // add this node to the priority-queue.
                q.add(f);
            }
            dgn.appender2();
            System.out.println("Your Huffman Code is:-");
            dgn.appender2();
            System.out.println("character  :   code-word");
            // print the codes by traversing the tree
            printCode(root, "");
            dgn.printStars();

            char choice;
            Label:
            dgn.appender2();
            System.out.print("Enter 'C' to continue or 'E' to exit: ");
            choice = s.next().charAt(0);
            switch (choice) {
                case 'c':
                case 'C':
                    exit = false;
                    break;

                case 'e':
                case 'E':
                    exit = true;
                    break;

                default:
                    dgn.appender2();
                    System.out.println("---INVALID INPUT---");
            }
        }
    }
}
